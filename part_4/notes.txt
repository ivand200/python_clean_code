• S: Single responsibility principle
• O: Open/closed principle
• L: Liskov's substitution principle
• I: Interface segregation principle
• D: Dependency inversion principle


The single responsibility principle (SRP)
The single responsibility principle (SRP) states that a software component (in
general, a class) must have only one responsibility.
Again, the smaller the class, the better.
There is another way of looking at this principle. If, when looking at a class, we find
methods that are mutually exclusive and do not relate to each other, they are the
different responsibilities that have to be broken down into smaller classes.
An interesting observation of most (if not all) of the principles we're exploring in
this chapter is that we shouldn't try to get them right from the very first design. The
idea is to design software that can be easily extended and changed, and that can
evolve toward a more stable version.
In particular, you can use the SRP as a thought process. For example, if you're
designing a component (let's say a class), and there are a lot of different things that
need to be done (as in the previous example), right from the beginning you can
anticipate that this will not end well, and that you need to separate responsibilities.
That's a good start, but then the question is: what are the right boundaries to separate
responsibilities? So, to understand this, you can start writing a monolithic class, in
order to understand what the internal collaborations are and how responsibilities
are distributed. This will help you get a clearer picture of the new abstractions that
need to be created.


The open/closed principle
This is the true essence of this principle—when something new appears on the
domain problem, we only want to add new code, not modify any existing code.
One important final note is that, in order to achieve this design in which we do not
change the code to extend behavior, we need to be able to create proper closure
against the abstractions we want to protect (in this example, new types of events).


Liskov's substitution principle
Liskov's substitution principle (LSP) states that there is a series of properties that
an object type must hold to preserve the reliability of its design. This principle also 
makes sense from an object-oriented design perspective. Remember that subclassing should 
create more specific types, but each subclass must be what the parent class declares.


Interface segregation
The interface segregation principle (ISP) provides some guidelines for an idea that
we have revisited quite repeatedly already: that interfaces should be small.


In Python, interfaces are implicitly defined by a class according to its methods.
This is because Python follows the so-called duck typing principle.
Traditionally, the idea behind duck typing was that any object is really represented
by the methods it has, and by what it is capable of doing. This means that, regardless
of the type of the class, its name, docstring, class attributes, or instance attributes,
what ultimately defines the essence of the object are the methods it has. The methods
defined in a class (what it knows how to do) are what determines what that object
will be. It was called duck typing because of the idea that "If it walks like a duck,
and quacks like a duck, it must be a duck."


Dependency inversion
The dependency inversion principle (DIP) proposes an interesting design principle
by which we protect our code by making it independent of things that are fragile,
volatile, or out of our control. The idea of inverting dependencies is that our code
should not adapt to details or concrete implementations, but rather the other way
around: we want to force whatever implementation or detail to adapt to our code
via a sort of API.


